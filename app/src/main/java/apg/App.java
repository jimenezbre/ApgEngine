/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package apg;

import static java.lang.System.out;
import apg.apgEngine.Component;
import apg.apgEngine.GUI.TextGui;
import apg.apgEngine.gameobject.GameObject;
import static apg.apgEngine.input.Mouse.handleMouse;
import apg.apgEngine.utils.AutoIncrement;
import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWVidMode;
import apg.apgEngine.gameobject.camera.Camera;
import apg.apgEngine.gameobject.primitive.Cube;
import apg.apgEngine.geometry.tridimensional.Vector3;
import apg.apgEngine.graphics.OpenGL;
import apg.apgEngine.graphics.mesh.Line;
import apg.apgEngine.graphics.mesh.Point;
import apg.apgEngine.input.Mouse;
import static apg.apgEngine.scene.Grid.drawGrid;
import java.util.Random;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.GL11;
import org.lwjgl.stb.STBImage;

import java.nio.ByteBuffer;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_DOWN;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_E;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_LEFT;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_Q;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_RIGHT;
import static org.lwjgl.glfw.GLFW.GLFW_KEY_UP;
import static org.lwjgl.glfw.GLFW.GLFW_PRESS;
import static org.lwjgl.glfw.GLFW.glfwGetKey;
import apg.apgEngine.physics.Time;
import static org.lwjgl.glfw.GLFW.GLFW_CONTEXT_VERSION_MAJOR;
import static org.lwjgl.glfw.GLFW.GLFW_CONTEXT_VERSION_MINOR;
import static org.lwjgl.glfw.GLFW.GLFW_OPENGL_CORE_PROFILE;
import static org.lwjgl.glfw.GLFW.GLFW_OPENGL_FORWARD_COMPAT;
import static org.lwjgl.glfw.GLFW.GLFW_OPENGL_PROFILE;
import static org.lwjgl.glfw.GLFW.GLFW_TRUE;
import static org.lwjgl.glfw.GLFW.glfwDefaultWindowHints;
import static org.lwjgl.glfw.GLFW.glfwWindowHint;
import static org.lwjgl.opengl.GL11.GL_BLEND;
import static org.lwjgl.opengl.GL11.GL_DEPTH_TEST;
import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.glBlendFunc;
import static org.lwjgl.opengl.GL11.glEnable;



public class App {

    private static final Random random = new Random();
    
    
    private static Vector3 tempCameraPos = new Vector3();
    

    private static float cameraPositionX;
    private static float cameraPositionY;
    private static float cameraPositionZ;
    private static float movimentSpeed = .5f;
    private static float lastFrame;
    private static float deltaTime;    
    

    public static void main(String[] args) throws ClassNotFoundException {
 
        
            GameObject gameObject = new GameObject();
            gameObject.addComponent(new TextGui());
            Component tg = gameObject.getComponent("TextGUI");
            TextGui a = (TextGui) tg;
           
            
            
            
            //TextGUI text = new TextGUI();
            //Cube cube = new Cube();
            //Camera camera = new Camera();
            //Line line = new Line(new Point(), new Point(), new Point());
            //OpenGL.addLine(line);
        if (!GLFW.glfwInit()) {
            throw new IllegalStateException("Unable to initialize GLFW");
        }
        
        
        

        // Create a windowed mode window and its OpenGL context
        glfwDefaultWindowHints();
        glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
        glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);
        long window = GLFW.glfwCreateWindow(800, 600, "LWJGL OpenGL Frame", 0, 0);
        if (window == 0) {
            GLFW.glfwTerminate();
            throw new RuntimeException("Failed to create the GLFW window");
        }

        // Get the resolution of the primary monitor
        GLFWVidMode vidMode = GLFW.glfwGetVideoMode(GLFW.glfwGetPrimaryMonitor());

        // Center the window
        GLFW.glfwSetWindowPos(
            window,
            (vidMode.width() - 800) / 2,
            (vidMode.height() - 600) / 2
        );

        // Make the OpenGL context current
        GLFW.glfwMakeContextCurrent(window);

        // Enable v-sync
        //GLFW.glfwSwapInterval(1);

        // Make the window visible
        GLFW.glfwShowWindow(window);

        //inicialize Opengl
        GL.createCapabilities();
        
        //inicialize OpenGl "Alfa channel"
        glEnable(GL_BLEND);
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        glEnable(GL_DEPTH_TEST);

        
        //Camera
        GL11.glMatrixMode(GL11.GL_PROJECTION);
        GL11.glLoadIdentity();
        GL11.glFrustum(-.7, 0.7, -.7, .7, 1, 500); // Perspective projection
        GL11.glMatrixMode(GL11.GL_MODELVIEW);
        
        
        
        //the frame
        while (!GLFW.glfwWindowShouldClose(window)) {
            Time.updateTime(); // update time referecen for all calculations
            // background
            //GL11.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

            //OpenGL.render();
            
            GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
            GL11.glLoadIdentity();
            handleMouse(window);
            handleInput(window);
            
            // Move the "camera"
            GL11.glTranslatef(0,0, 0); //ajust position to rotate itself
            GL11.glRotatef(Mouse.getRotationX(), 1, 0, 0);
            GL11.glRotatef(Mouse.getRotationY(), 0, 1, 0);
            GL11.glTranslatef(cameraPositionX,cameraPositionY, cameraPositionZ);// return to position
            drawGrid();
            
            //drawColorNoise();

            // Swap buffers
            GLFW.glfwSwapBuffers(window);

            // Poll for and process events
            GLFW.glfwPollEvents();
        }

        // Release resources
        GLFW.glfwTerminate();
    }
    
    private static void handleInput(long window) {
        if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS) {
            cameraPositionZ += movimentSpeed;
        }
        if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS) {
            cameraPositionZ -= movimentSpeed;
        }
        if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS) {
            cameraPositionX -= movimentSpeed;
        }
        if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS) {
            cameraPositionX += movimentSpeed;
        }
        if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS) {
            cameraPositionY -= movimentSpeed;
        }
        if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS) {
            cameraPositionY += movimentSpeed;
        }
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

     private static void drawColorNoise() {
        GL11.glBegin(GL11.GL_POINTS);

        for (float x = 0; x < 800; x+=0.5f) {
            for (float y = 0; y < 600; y++) {
                float noiseIntensity = 0.1f; // Adjust the noise intensity
                float noiseColor = (float) (noiseIntensity * random.nextGaussian());

                // Randomly modify the RGB components of the color
                float red = Math.min(Math.max(1 + noiseColor, 0), 1);
                float green = Math.min(Math.max(1 + noiseColor, 0), 1);
                float blue = Math.min(Math.max(1 + noiseColor, 0), 1);

                GL11.glColor3f(red, green, blue);
                GL11.glVertex2f(x, y);
            }
        }

        GL11.glEnd();

//        
//
//        while (!Display.isCloseRequested()) {
//            
//
//            Display.update();
//            Display.sync(60);
//        }
//
//        Display.destroy();
//    }
    }
}


